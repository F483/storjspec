// syntax guide: http://www.graphviz.org/pdf/dotguide.pdf
// compile png: `dot -Tpng dependencies.dot -o dependencies.png`
// compile pdf: `dot -Tpdf dependencies.dot -o dependencies.pdf`


digraph G {
    node [shape="box", style="filled", color="black", fillcolor="white"];

    // LEGEND
    subgraph cluster_0 {
        label = "Status legend";

        "Complete" [fillcolor=green, shape=ellipse];
        "Working API" [fillcolor=yellow, shape=ellipse];
        "Partial" [fillcolor=orange, shape=ellipse];

        "Full spec" [shape=ellipse];
        "Partial spec" [shape=hexagon];
        "Undefined spec" [shape=box];
    };
    "Complete" -> "Working API" -> "Partial";
    "Full spec" -> "Partial spec" -> "Undefined spec";


    // STORJNET
    subgraph cluster_1 {
        label = "Storjnet";
        style=filled;
        color=lightblue;

        "Pub/Sub" [shape=hexagon]; // enable publishing and subscribing to events
        "Data streams" [shape=hexagon]; // full duplex data transfer
        "Messaging" [shape=hexagon]; // to shortcut the pubsub after peer found
        "RPC"; // rpc calls and data transfer between clients
        "E2EE"; // End-to-end encryption
        "Bandwidth limiter";
        "REST (SIP 002)"; // put/get shards
    };
    "Pub/Sub" -> "RPC";
    "Messaging" -> "RPC";
    "Data streams" -> "RPC";
    "RPC" -> "Bandwidth limiter";
    "REST (SIP 002)" -> "Bandwidth limiter";
    "Bandwidth limiter" -> "E2EE";
    "E2EE" -> "Crypto";
    "E2EE" -> "Transport";
    "Bandwidth limiter" -> "Database";

    // STORJTERMS
    subgraph cluster_2 {
        label = "Storjterms";
        style=filled;
        color=lightgoldenrod;

        "Contract" [shape=hexagon]; // terms of a storage contract between peers
        "Audit" [fillcolor=orange, shape=hexagon]; // track state of a contract over time
        "Heartbeat";
    };
    "Audit" -> "Contract"; // when/how to perform the audit
    "Audit" -> "Store manager"; // perform audit challange
    "Audit" -> "Ledger (SIP 001)"; // save result in ledger
    "Heartbeat" -> "Contract";
    "Heartbeat" -> "Store manager"; // perform heartbeat challange
    "Heartbeat" -> "Ledger (SIP 001)"; // save result in ledger

    // STORJNODE
    subgraph cluster_3 {
        label = "Storjnode";
        style=filled;
        color=lightseagreen;

        "Roy"; // for sending/receiving of funds for services used 
        "Store manager" [fillcolor=orange, shape=hexagon];
        "Wallet" [fillcolor=orange, shape=hexagon];
        "Contract manager"; // Store contracts
        "CHISQRDTEST (SIP 003)";
        "Graylist (SIP 004)";
        "Ledger (SIP 001)" [fillcolor=orange, shape=hexagon];
    };
    "Roy" -> "Contract manager";
    "Contract manager" -> "Database";
    "Store manager" -> "File system";
    "Store manager" -> "Graylist (SIP 004)";
    "Store manager" -> "Database";
    "Graylist (SIP 004)" -> "CHISQRDTEST (SIP 003)";
    "CHISQRDTEST (SIP 003)" -> "Data streams";
    "CHISQRDTEST (SIP 003)" -> "REST (SIP 002)";
    "Wallet" -> "Blockchain";
    "Roy" -> "Messaging";
    "Roy" -> "Audit"; // perform audits
    "Roy" -> "Contract"; // verify agreed to use/provide a service
    "Roy" -> "Heartbeat";
    "Roy" -> "Ledger (SIP 001)"; // verify service was used/provided
    "Roy" -> "Wallet"; // transfer funds
    "Roy" -> "Pub/Sub"; // ask/bid on contracts
    "Roy" -> "Store manager";
    "Ledger (SIP 001)" -> "Blockchain";

    // EXTERNAL
    "File system" [fillcolor=green, shape=ellipse];
    "Crypto" [fillcolor=green, shape=ellipse];
    "Database" [fillcolor=green, shape=ellipse];
    "Blockchain" [fillcolor=green, shape=ellipse];
    "Transport" [fillcolor=green, shape=ellipse];
}
